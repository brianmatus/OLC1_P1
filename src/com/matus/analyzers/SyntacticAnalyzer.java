
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.matus.analyzers;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntacticAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\005\010\000\002\010\005\000\002\010\003\000" +
    "\002\012\005\000\002\012\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\006" +
    "\006\000\002\013\004\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\004\005\000\002" +
    "\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\012\005\001\002\000\004\002\051\001" +
    "\002\000\004\026\011\001\002\000\004\013\050\001\002" +
    "\000\004\016\046\001\002\000\004\016\044\001\002\000" +
    "\006\014\013\017\012\001\002\000\004\026\026\001\002" +
    "\000\004\015\014\001\002\000\016\022\016\023\023\024" +
    "\017\026\024\030\021\031\020\001\002\000\020\016\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\026\ufff0\030\ufff0\031\ufff0\001" +
    "\002\000\020\016\uffef\022\uffef\023\uffef\024\uffef\026\uffef" +
    "\030\uffef\031\uffef\001\002\000\020\016\uffec\022\uffec\023" +
    "\uffec\024\uffec\026\uffec\030\uffec\031\uffec\001\002\000\020" +
    "\016\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb\030\uffeb\031" +
    "\uffeb\001\002\000\020\016\uffea\022\uffea\023\uffea\024\uffea" +
    "\026\uffea\030\uffea\031\uffea\001\002\000\020\016\ufff2\022" +
    "\016\023\023\024\017\026\024\030\021\031\020\001\002" +
    "\000\020\016\uffed\022\uffed\023\uffed\024\uffed\026\uffed\030" +
    "\uffed\031\uffed\001\002\000\020\016\uffee\022\uffee\023\uffee" +
    "\024\uffee\026\uffee\030\uffee\031\uffee\001\002\000\020\016" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\030\ufff1\031\ufff1" +
    "\001\002\000\004\014\027\001\002\000\004\015\030\001" +
    "\002\000\012\025\035\026\037\030\036\031\034\001\002" +
    "\000\004\016\ufffb\001\002\000\006\016\ufff9\020\042\001" +
    "\002\000\010\011\040\016\ufff7\020\ufff7\001\002\000\010" +
    "\011\ufff3\016\ufff3\020\ufff3\001\002\000\010\011\ufff4\016" +
    "\ufff4\020\ufff4\001\002\000\010\011\ufff5\016\ufff5\020\ufff5" +
    "\001\002\000\010\011\ufff6\016\ufff6\020\ufff6\001\002\000" +
    "\012\025\035\026\037\030\036\031\034\001\002\000\004" +
    "\016\ufffa\001\002\000\012\025\035\026\037\030\036\031" +
    "\034\001\002\000\006\016\ufff8\020\ufff8\001\002\000\006" +
    "\013\ufffc\026\011\001\002\000\004\013\ufffe\001\002\000" +
    "\006\013\ufffd\026\011\001\002\000\004\013\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\005\005\006\006\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\021\014\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\030" +
    "\011\032\012\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\040\001" +
    "\001\000\002\001\001\000\004\011\042\001\001\000\002" +
    "\001\001\000\010\003\044\005\006\006\007\001\001\000" +
    "\002\001\001\000\010\003\046\005\006\006\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntacticAnalyzer$actions {
  private final SyntacticAnalyzer parser;

  /** Constructor */
  CUP$SyntacticAnalyzer$actions(SyntacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action_part00000000(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzer$parser.done_parsing();
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= key_o E_PART1 key_c 
            {
              String RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E_PART1 ::= E_SET_DEFINITION semicolon E_PART1 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		 System.out.println("Grupo definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E_PART1 ::= E_REGEX_DEFINITION semicolon E_PART1 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		 System.out.println("Regex definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E_PART1 ::= E_SET_DEFINITION semicolon 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 System.out.println("Grupo definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E_PART1 ::= E_REGEX_DEFINITION semicolon 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 System.out.println("Regex definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E_SET_DEFINITION ::= id colon id score morethan E_RANGE_VALUE 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = "SET DEF-->keyword:" + w1 + " name:" + w2 + " val:" + val;  
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_SET_DEFINITION",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E_RANGE_VALUE ::= E_RANGE_ELEMENT range E_RANGE_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a + " all the way thru " + b; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_VALUE",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E_RANGE_VALUE ::= E_RANGE_LIST 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_VALUE",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E_RANGE_LIST ::= E_RANGE_LIST comma E_RANGE_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a + "<->" + b; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_LIST",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E_RANGE_LIST ::= E_RANGE_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = "LIST->" + a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_LIST",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E_RANGE_ELEMENT ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E_RANGE_ELEMENT ::= number 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E_RANGE_ELEMENT ::= range_special_char 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E_RANGE_ELEMENT ::= string 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E_REGEX_DEFINITION ::= id score morethan E_REGEX_VALUE 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = "REGEX DEF-->name:" + name + " val:" + val;  
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_DEFINITION",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E_REGEX_VALUE ::= E_REGEX_VALUE E_REGEX_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a + "<->" + b; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_VALUE",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E_REGEX_VALUE ::= E_REGEX_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_VALUE",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E_REGEX_ELEMENT ::= dot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E_REGEX_ELEMENT ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E_REGEX_ELEMENT ::= asterisk 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E_REGEX_ELEMENT ::= or_sign 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E_REGEX_ELEMENT ::= string 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E_REGEX_ELEMENT ::= number 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E_PART2 ::= E_EXPR_TESTING semicolon E_PART2 
            {
              String RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART2",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E_PART2 ::= E_EXPR_TESTING semicolon 
            {
              String RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART2",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzer$do_action_part00000000(
                               CUP$SyntacticAnalyzer$act_num,
                               CUP$SyntacticAnalyzer$parser,
                               CUP$SyntacticAnalyzer$stack,
                               CUP$SyntacticAnalyzer$top);
    }
}

}
