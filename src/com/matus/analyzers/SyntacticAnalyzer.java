
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.matus.analyzers;

import java_cup.runtime.Symbol;
import com.matus.elements.language.Token;
import com.matus.Main;
import com.matus.elements.language.SyntacticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntacticAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\007\000\002\015" +
    "\004\000\002\015\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\005\011\000" +
    "\002\005\003\000\002\010\005\000\002\010\003\000\002" +
    "\012\005\000\002\012\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\006" +
    "\007\000\002\013\004\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\005\000\002\014\003\000\002\004" +
    "\005\000\002\004\004\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\004\010\005\001\002\000\004\002\104\001" +
    "\002\000\006\003\010\027\012\001\002\000\010\003\010" +
    "\020\072\027\012\001\002\000\010\003\ufffc\020\ufffc\027" +
    "\ufffc\001\002\000\010\003\ufff8\020\ufff8\027\ufff8\001\002" +
    "\000\010\003\ufffa\020\ufffa\027\ufffa\001\002\000\006\012" +
    "\014\016\013\001\002\000\004\027\036\001\002\000\004" +
    "\013\015\001\002\000\026\003\026\010\030\021\017\022" +
    "\021\023\022\024\031\027\020\031\024\032\025\033\027" +
    "\001\002\000\030\003\uffe3\010\uffe3\015\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\001\002\000\030\003\uffe2\010\uffe2\015\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\001\002\000\030\003\uffe1\010\uffe1\015\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\001\002\000\030\003\uffe0\010\uffe0\015\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\001\002\000\030\003\uffdf\010\uffdf\015\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\001\002\000\030\003\026\010\030\015\035\021\017\022" +
    "\021\023\022\024\031\027\020\031\024\032\025\033\027" +
    "\001\002\000\030\003\uffdc\010\uffdc\015\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\001\002\000\030\003\uffdd\010\uffdd\015\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\001\002\000\030\003\uffd9\010\uffd9\015\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\001\002\000\030\003\uffde\010\uffde\015\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\027\uffde\031\uffde\032\uffde\033\uffde" +
    "\001\002\000\004\027\032\001\002\000\030\003\uffdb\010" +
    "\uffdb\015\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\027\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\001\002\000\004\011\033\001" +
    "\002\000\030\003\uffda\010\uffda\015\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\027\uffda\031\uffda\032\uffda\033\uffda\001" +
    "\002\000\030\003\uffe4\010\uffe4\015\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\001" +
    "\002\000\010\003\uffe5\020\uffe5\027\uffe5\001\002\000\004" +
    "\012\037\001\002\000\004\013\040\001\002\000\036\003" +
    "\054\010\055\011\046\012\045\013\053\014\051\021\042" +
    "\023\044\024\057\025\060\027\043\031\047\032\052\033" +
    "\056\001\002\000\006\015\ufff6\017\065\001\002\000\010" +
    "\007\uffe9\015\uffe9\017\uffe9\001\002\000\010\007\ufff3\015" +
    "\ufff3\017\ufff3\001\002\000\010\007\uffe8\015\uffe8\017\uffe8" +
    "\001\002\000\010\007\uffec\015\uffec\017\uffec\001\002\000" +
    "\010\007\uffea\015\uffea\017\uffea\001\002\000\010\007\ufff2" +
    "\015\ufff2\017\ufff2\001\002\000\010\007\063\015\ufff4\017" +
    "\ufff4\001\002\000\010\007\uffed\015\uffed\017\uffed\001\002" +
    "\000\010\007\uffef\015\uffef\017\uffef\001\002\000\010\007" +
    "\uffee\015\uffee\017\uffee\001\002\000\010\007\uffe6\015\uffe6" +
    "\017\uffe6\001\002\000\010\007\uffeb\015\uffeb\017\uffeb\001" +
    "\002\000\010\007\ufff0\015\ufff0\017\ufff0\001\002\000\010" +
    "\007\uffe7\015\uffe7\017\uffe7\001\002\000\010\007\ufff1\015" +
    "\ufff1\017\ufff1\001\002\000\004\015\062\001\002\000\010" +
    "\003\ufff9\020\ufff9\027\ufff9\001\002\000\036\003\054\010" +
    "\055\011\046\012\045\013\053\014\051\021\042\023\044" +
    "\024\057\025\060\027\043\031\047\032\052\033\056\001" +
    "\002\000\004\015\ufff7\001\002\000\036\003\054\010\055" +
    "\011\046\012\045\013\053\014\051\021\042\023\044\024" +
    "\057\025\060\027\043\031\047\032\052\033\056\001\002" +
    "\000\006\015\ufff5\017\ufff5\001\002\000\010\003\ufffd\020" +
    "\ufffd\027\ufffd\001\002\000\004\027\076\001\002\000\010" +
    "\003\ufffb\020\ufffb\027\ufffb\001\002\000\006\020\072\027" +
    "\ufffe\001\002\000\004\027\uffff\001\002\000\004\015\102" +
    "\001\002\000\004\011\101\001\002\000\004\016\077\001" +
    "\002\000\004\032\100\001\002\000\004\015\uffd6\001\002" +
    "\000\004\002\000\001\002\000\006\011\uffd7\027\076\001" +
    "\002\000\004\011\uffd8\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\005\005\006\006\010\001\001\000\010\005\066" +
    "\006\070\015\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\022\014\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\060\011" +
    "\047\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\063\001\001\000\002\001\001\000\004\011\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\074\007\073\001\001\000\002\001\001\000\004\015\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\102\007\073\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntacticAnalyzer$actions {
  private final SyntacticAnalyzer parser;

  /** Constructor */
  CUP$SyntacticAnalyzer$actions(SyntacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action_part00000000(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Abby EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzer$parser.done_parsing();
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Abby ::= key_o E_PART1 E_SEPARATOR E_PART2 key_c 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 System.out.println("Sintactico terminado");  RESULT = a+b+c+d+e; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Abby",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E_SEPARATOR ::= section_separator E_SEPARATOR 
            {
              String RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_SEPARATOR",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E_SEPARATOR ::= section_separator 
            {
              String RESULT =null;

              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_SEPARATOR",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E_PART1 ::= E_PART1 E_SET_DEFINITION 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 System.out.println("Grupo definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E_PART1 ::= E_SET_DEFINITION 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 System.out.println("ultimo Grupo definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E_PART1 ::= E_PART1 E_REGEX_DEFINITION 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 System.out.println("Regex definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E_PART1 ::= E_REGEX_DEFINITION 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 System.out.println("ultimo Regex definido!:" + d); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART1",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E_SET_DEFINITION ::= id colon id score morethan E_RANGE_VALUE semicolon 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 Main.logGroup(w1,w2,val, w1right,w1left);   RESULT =  w1 + "<->" + w2 + "<->" + val;  
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_SET_DEFINITION",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E_SET_DEFINITION ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 Main.logSyntacticError("","set_definition","se esperaba id:name -> range_value",aright,aleft); report_fatal_error("", null);
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_SET_DEFINITION",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E_RANGE_VALUE ::= E_RANGE_ELEMENT range E_RANGE_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a + "~" + b; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_VALUE",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E_RANGE_VALUE ::= E_RANGE_LIST 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_VALUE",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E_RANGE_LIST ::= E_RANGE_LIST comma E_RANGE_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a + "," + b; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_LIST",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E_RANGE_LIST ::= E_RANGE_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_LIST",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E_RANGE_ELEMENT ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E_RANGE_ELEMENT ::= number 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E_RANGE_ELEMENT ::= range_special_char 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E_RANGE_ELEMENT ::= question_mark 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E_RANGE_ELEMENT ::= string 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E_RANGE_ELEMENT ::= morethan 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E_RANGE_ELEMENT ::= lessthan 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E_RANGE_ELEMENT ::= score 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E_RANGE_ELEMENT ::= key_o 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E_RANGE_ELEMENT ::= key_c 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E_RANGE_ELEMENT ::= dot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E_RANGE_ELEMENT ::= or_sign 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E_RANGE_ELEMENT ::= plus_sign 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E_RANGE_ELEMENT ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 Main.logSyntacticError("","range_element","se esperaba id|number|special_char|\"|\"|+|.",aright,aleft); report_fatal_error("", null);
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_RANGE_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E_REGEX_DEFINITION ::= id score morethan E_REGEX_VALUE semicolon 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		   Main.logRegex(name,val, valright, valleft);  RESULT = name + "<->" + val;  
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_DEFINITION",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E_REGEX_VALUE ::= E_REGEX_VALUE E_REGEX_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a + "<->" + b; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_VALUE",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E_REGEX_VALUE ::= E_REGEX_ELEMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = a; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_VALUE",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E_REGEX_ELEMENT ::= dot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E_REGEX_ELEMENT ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E_REGEX_ELEMENT ::= asterisk 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E_REGEX_ELEMENT ::= or_sign 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E_REGEX_ELEMENT ::= question_mark 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E_REGEX_ELEMENT ::= string 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E_REGEX_ELEMENT ::= number 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E_REGEX_ELEMENT ::= plus_sign 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT =  a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E_REGEX_ELEMENT ::= key_o id key_c 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT =  "{" + a + "}";
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E_REGEX_ELEMENT ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 System.out.println(a); Main.logSyntacticError("","regex_element","se esperaba id|*|+|\"|\"|string|number|+|{conjunto}",aright,aleft); report_fatal_error("", null);
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_REGEX_ELEMENT",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E_PART2 ::= E_EXPR_TESTING semicolon E_PART2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		 RESULT = a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART2",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E_PART2 ::= E_EXPR_TESTING semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = a;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_PART2",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E_EXPR_TESTING ::= id colon string 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		int rgxleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).left;
		int rgxright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()).right;
		String rgx = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		Main.logRegexTest(name,rgx); RESULT = name + "<->" + rgx; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E_EXPR_TESTING",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzer$do_action_part00000000(
                               CUP$SyntacticAnalyzer$act_num,
                               CUP$SyntacticAnalyzer$parser,
                               CUP$SyntacticAnalyzer$stack,
                               CUP$SyntacticAnalyzer$top);
    }
}

}
